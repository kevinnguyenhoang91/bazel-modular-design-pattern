#!/bin/bash

set -e

# Make sure we're in the project root directory.
SCRIPTPATH="$( cd "$( dirname "${BASH_SOURCE[0]}"  )" && pwd )"
pushd "$SCRIPTPATH/.." > /dev/null

function exit_trap() {
    popd 2 &> /dev/null
    if [[ ! -z $BAZELISK_DEBUG_ACTION_CACHE ]]; then
        echo "INFO: dumping action cache post" >&2;
        mkdir -p bazel-diags
        $BAZELISK dump --action_cache > bazel-diags/bazel-action-cache-post.txt
    fi
}

trap exit_trap EXIT

# Go to bazel release page
# These are typically posted in groups.google
# https://groups.google.com/forum/#!forum/bazel-discuss

read -r BAZELISK_VERSION < .bazeliskversion
read -r BAZEL_VERSION < .bazelversion

if [[ $OSTYPE == darwin* ]]; then
    readonly BAZEL_PLATFORM="darwin"
    BAZELISK_VERSION_SHA="e1e34f038985a69b2b5563777bf638d88dbb2b8c97dd3c706741efe47c75ca47"
else
    echo "WARNING: This is not macOS, exiting now." >&2;
    exit 1
fi

BAZELISK_VERSION_URL="https://github.com/bazelbuild/bazelisk/releases/download/${BAZELISK_VERSION}/bazelisk-${BAZEL_PLATFORM}-amd64"
BAZELISK_ROOT="$HOME/.bazelisk/versions/$BAZELISK_VERSION"
BAZELISK_PATH="$BAZELISK_ROOT/bin/bazelisk"
XCODE_SELECT_ENV_PATH="${SCRIPTPATH}/.xcode_select_env"

BAZELISK=""

function install_bazelisk() {
    rm -f $BAZELISK_PATH
    mkdir -p "$BAZELISK_ROOT/bin"
    curl -L "$BAZELISK_VERSION_URL" > $BAZELISK_PATH
    SHA=$(shasum -a 256 $BAZELISK_PATH | awk '{ print $1 }')
    if [[ $SHA == $BAZELISK_VERSION_SHA ]]; then
        chmod +x $BAZELISK_PATH
    else
        echo "Checksum incorrect, wanted $BAZELISK_VERSION_SHA, but actually $SHA" >&2;
        echo "You version of bazelisk is out of date. Ask for help in #mobile-ios" >&2;
        rm -rf $BAZELISK_ROOT
        exit 1
    fi
}

# Check if we have the correct version of bazelisk installed in the home
# directory.
if [[ -e "$BAZELISK_PATH" ]]; then
    BAZELISK="$BAZELISK_PATH"
fi

# Ensure we can execute the path for bazelisk and that it's the correct version
if ! [[ -e "$BAZELISK" ]]; then
    echo "WARNING: Missing installation or incorrect bazelisk version ($BAZELISK_VERSION)" >&2;
    echo "Installing Bazelisk $BAZELISK_VERSION to $BAZELISK_PATH" >&2;
    install_bazelisk
    BAZELISK=$BAZELISK_PATH
fi

if [[ -x "${BAZELISK}" ]]; then
    CURRENT_XCODE_PATH="$(/usr/bin/xcode-select -p)"
    XCODE_VERSION=$(/usr/bin/xcodebuild -version | grep Xcode | cut -d ' ' -f2)
    CURRENT_XCODE_HASH="${CURRENT_XCODE_PATH}-${XCODE_VERSION}-${BAZELISK_VERSION}-${BAZEL_VERSION}"
    if [[ -f "${XCODE_SELECT_ENV_PATH}" ]]; then
        EXISTING_XCODE_HASH="$(cat "${XCODE_SELECT_ENV_PATH}")"
        if [[ $EXISTING_XCODE_HASH != $CURRENT_XCODE_HASH ]]; then
            echo "Xcode select path or Bazelisk/Bazel version has changed, must clear cached data" >&2;
            $BAZELISK clean --expunge
        fi
    fi
    echo "${CURRENT_XCODE_HASH}" > $XCODE_SELECT_ENV_PATH

    # Make variable support
    # In the context of Xcode builds, variables are defined as "Make variable"
    # strings.
    # In practice, the variables are stored as strings, and then later assigned to
    # the value of the current environment.
    ARGS=()
    for ARG in "$@"; do
        if [[ "$ARG" =~ \$(.*) ]]; then
            # Get the name of the make variable
            MAKEVAR=$(echo $ARG | sed 's,.*\$(\(.*\)).*,\1,g')
            # Next, parameter expansion of the variable by name
            VALUE="${!MAKEVAR}"
            REPLACED="$(echo $ARG | sed "s,\$(\(.*\)),$VALUE,g")"
            ARGS+=(${REPLACED})
        else
            ARGS+=("${ARG}")
        fi
    done
    
    "${BAZELISK}" "${ARGS[@]}"
else
    echo "WARNING: Missing installation of bazelisk" >&2;
    exit 1
fi
